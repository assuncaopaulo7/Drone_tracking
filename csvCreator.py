
"""
This script generates CSV files for drone trajectories and visualizes them. It supports creating trajectories in different shapes, such as circles and squares, and exports them in a structured format for offboard control in PX4.

Functions:
----------
- `create_active_csv`: Generates a CSV file for a specified trajectory shape.
- `export_and_plot_shape`: Visualizes the trajectory and saves the plot.

Parameters:
-----------
- `shape_name` (str): The name of the trajectory shape (e.g., "circle", "square"). # Nome da forma da trajetória
- `diameter` (float): The diameter or size of the trajectory shape in meters. # Diâmetro ou tamanho da forma
- `direction` (int): The direction of the trajectory (1 for clockwise, -1 for counterclockwise). # Direção da trajetória
- `maneuver_time` (float): Total time in seconds for the maneuver. # Tempo total da manobra
- `start_x` (float): Starting X-coordinate of the trajectory. # Coordenada X inicial
- `start_y` (float): Starting Y-coordinate of the trajectory. # Coordenada Y inicial
- `initial_altitude` (float): Initial altitude of the drone in meters. # Altitude inicial do drone
- `climb_rate` (float): Rate of climb in meters per second. # Taxa de subida
- `move_speed` (float): Speed of the drone in meters per second during the trajectory. # Velocidade do drone
- `hold_time` (float): Time in seconds to hold at specific points in the trajectory. # Tempo de espera em pontos específicos
- `step_time` (float): Time step in seconds for each trajectory point. # Intervalo de tempo entre pontos
- `output_file` (str): Path to the output CSV file for the trajectory. # Caminho para o arquivo CSV de saída

1. Generate a circular trajectory:
    ```python
         shape_name="circle",
         diameter=100.0,
         direction=1,
         maneuver_time=90.0,
         start_x=0,
         start_y=0,
         initial_altitude=15,
         climb_rate=1.0,
         move_speed=2.0,
         hold_time=4.0,
         step_time=0.1,
         output_file="shapes/active.csv",
    ```

2. Generate a square trajectory:
    ```python
         shape_name="square",
         diameter=95.0,
         direction=1,
         maneuver_time=90.0,
         start_x=0,
         start_y=0,
         initial_altitude=15,
         climb_rate=1.0,
         move_speed=2.0,
         hold_time=4.0,
         step_time=0.1,
         output_file="shapes/active2.csv",
    ```

3. Visualize the generated trajectories:
    ```python
    export_and_plot_shape("shapes/active.csv")
    export_and_plot_shape("shapes/active2.csv")
    ```

Notes:
- Ensure all dependencies are installed, including `matplotlib`, `numpy`, and `pandas`.
- The generated CSV files can be used with the `offboard_from_csv.py` script for drone control.
Example Usage:
--------------
To generate a CSV file for a circular trajectory, use the following code snippet:

create_active_csv(shape_name="circle", diameter=5.0, direction=1, maneuver_time=60.0, start_x=0.0, start_y=0.0, initial_altitude=10.0, climb_rate=2.0, move_speed=2.5, hold_time=2.0)

Visualization:
--------------
After generating the CSV file, you can visualize the trajectory using plot functions and save the trajectory plot in the "shaped" folder along with the CSV file.

Note:
-----
Make sure to have the necessary dependencies installed and correctly set up the offboard control system to use the generated CSV file for controlling the drone in an offboard mode.

Usage:
------
The output generated by `csvCreator.py` can be utilized in the `offboard_from_csv.py` file, also available in the same GitHub repository, to control a drone in an offboard mode. The generated CSV file contains the necessary information for each step of the drone's trajectory, including position, velocity, acceleration, yaw angle, and LED colors.

Offboard Control in PX4:
------------------------
The offboard mode in PX4 is a flight mode that allows external systems to control the drone's position and velocity directly. It enables autonomous flight and is commonly used in research, development, and testing scenarios. The offboard control system communicates with the drone's flight controller through a communication protocol like MAVLink.

To use the CSV output generated by `csvCreator.py` for offboard control in PX4, you can follow these steps:
1. Load the generated CSV file, which represents the desired trajectory for the drone.
2. Extract the position and velocity information from the CSV file.
3. Send the position and velocity commands to the drone's flight controller using an offboard control system, such as the `offboard_from_csv.py` script.
4. The flight controller will interpret the commands and execute the desired trajectory, guiding the drone accordingly.

CSV File Structure and Guide:
----------------------------
The CSV file created by `csvCreator.py` follows a specific structure, where each row represents a step of the drone's trajectory. The columns in the CSV file contain the following information:
- `idx`: Index or step number of the trajectory.
- `t`: Time in seconds for the given step.
- `px`: Drone's position in the X-axis.
- `py`: Drone's position in the Y-axis.
- `pz`: Drone's position in the Z-axis (negative value indicates altitude).
- `vx`: Drone's velocity in the X-axis.
- `vy`: Drone's velocity in the Y-axis.
- `vz`: Drone's velocity in the Z-axis.
- `ax`: Drone's acceleration in the X-axis.
- `ay`: Drone's acceleration in the Y-axis.
- `az`: Drone's acceleration in the Z-axis.
- `yaw`: Drone's yaw angle.
- 'mode' : Flight Phase Mode
- `ledr`: Red component value for the drone's LED color.
- `ledg`: Green component value for the drone's LED color.
- `ledb`: Blue component value for the drone's LED color.

Flight Modes and Codes:
- 0: On the ground
- 10: Initial climbing state
- 20: Initial holding after climb
- 30: Moving to start point
- 40: Holding at start point
- 50: Moving to maneuvering start point
- 60: Holding at maneuver start point
- 70: Maneuvering (trajectory)
- 80: Holding at the end of the trajectory coordinate
- 90: Returning to home coordinate
- 100: Landing

Each flight mode is represented by an integer code. These codes are used to indicate the different phases of the flight in the CSV file.

To create a valid CSV file for offboard control, make sure to adhere to the structure described above. Each row should represent a specific time step with the corresponding position, velocity, acceleration, and LED color values.

"""

import csv 
import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
from functions.export_and_plot_shape import export_and_plot_shape
from functions.trajectories import *
from functions.create_active_csv import create_active_csv

# Example usage
shape_name="circle"
diameter = 20.0
direction = 1
maneuver_time = 90.0
start_x = 10
start_y = 10
initial_altitude = 15
climb_rate = 1.0
move_speed = 2.0  # m/s
hold_time = 4.0 #s
step_time = 0.1 #s
output_file = "shapes/active.csv"

shape_name2="square"
diameter2 = 20.0
direction2 = -1
maneuver_time2 = 90.0
start_x2 = 0
start_y2 = 0
initial_altitude2 = 15
climb_rate2 = 1.0
move_speed2 = 2.0  # m/s
hold_time2 = 4.0 #s
step_time2= 0.1 #s
output_file2 = "shapes/active2.csv"

create_active_csv(
    shape_name=shape_name,
    diameter=diameter,
    direction=direction,
    maneuver_time=maneuver_time,
    start_x=start_x,
    start_y=start_y,
    initial_altitude=initial_altitude,
    climb_rate=climb_rate,
    move_speed = move_speed,
    hold_time = hold_time,
    step_time = step_time,
    output_file = output_file,
)

create_active_csv(
    shape_name=shape_name2,
    diameter=diameter2,
    direction=direction2,
    maneuver_time=maneuver_time2,
    start_x=start_x2,
    start_y=start_y2,
    initial_altitude=initial_altitude2,
    climb_rate=climb_rate2,
    move_speed = move_speed2,
    hold_time = hold_time2,
    step_time = step_time2,
    output_file = output_file2,
)

output_file = "shapes/active.csv"
export_and_plot_shape(output_file)

output_file2 = "shapes/active2.csv"
export_and_plot_shape(output_file2)
